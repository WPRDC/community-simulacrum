# Generated by Django 3.0.3 on 2020-10-13 01:39

import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('geo', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DataViz',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Data Visualization',
                'verbose_name_plural': 'Data Visualizations',
            },
        ),
        migrations.CreateModel(
            name='Indicator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('long_description', models.TextField(blank=True, help_text='A thorough description for long-form representation.', null=True)),
                ('limitations', models.TextField(blank=True, help_text='Describe what limitations the data may have (e.g. small sample size, difficulties in collecting data', null=True)),
                ('importance', models.TextField(blank=True, help_text='Describe the data collection process, highlighting areas where bias and assumptions made during the collection can impact how the data are interpreted', null=True)),
                ('source', models.TextField(blank=True, help_text='Describe the data collection process, highlighting areas where bias and assumptions made during the collection can impact how the data are interpreted', null=True)),
                ('provenance', models.TextField(blank=True, help_text='Describe the data collection process, highlighting areas where bias and assumptions made during the collection can impact how the data are interpreted', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_indicators.series_set+', to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_indicators.source_set+', to='contenttypes.ContentType')),
                ('series', models.ManyToManyField(related_name='sources', to='indicators.Series')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Variable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('units', models.CharField(blank=True, max_length=30, null=True)),
                ('unit_notes', models.CharField(blank=True, max_length=50, null=True)),
                ('percent_label_text', models.CharField(blank=True, help_text='Label to use when being used as denominator. If not provided, "% of &lt;title&gt;" will be used', max_length=100, null=True)),
                ('depth', models.IntegerField(default=0, help_text='Used to represent hierarchy of data. In practice, it is used to indent rows in a table corresponding to this variable')),
                ('denominators', models.ManyToManyField(blank=True, help_text='Variables that represent a universe under which the current variable can be analyzed', to='indicators.Variable')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_indicators.variable_set+', to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CensusSource',
            fields=[
                ('source_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='indicators.Source')),
                ('dataset', models.CharField(choices=[('CEN', 'Decennial Census'), ('ACS5', 'ACS 5-year'), ('ACS1', 'ACS 1-year')], default='CEN', max_length=4)),
            ],
            options={
                'abstract': False,
            },
            bases=('indicators.source',),
        ),
        migrations.CreateModel(
            name='CensusVariable',
            fields=[
                ('variable_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='indicators.Variable')),
            ],
            options={
                'abstract': False,
            },
            bases=('indicators.variable',),
        ),
        migrations.CreateModel(
            name='CKANSource',
            fields=[
                ('source_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='indicators.Source')),
                ('package_id', models.UUIDField()),
                ('resource_id', models.UUIDField()),
            ],
            options={
                'abstract': False,
            },
            bases=('indicators.source', models.Model),
        ),
        migrations.CreateModel(
            name='MiniMap',
            fields=[
                ('dataviz_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='indicators.DataViz')),
                ('layer_type', models.CharField(choices=[('background', 'background'), ('fill', 'fill'), ('line', 'line'), ('symbol', 'symbol'), ('raster', 'raster'), ('circle', 'circle'), ('fill - extrusion', 'fill - extrusion'), ('heatmap', 'heatmap'), ('hillshade', 'hillshade')], default='line', max_length=16)),
                ('carto_table', models.CharField(max_length=80)),
                ('fields', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=80), blank=True, size=None)),
                ('geom_field', models.CharField(default='the_geom', max_length=40)),
                ('paint', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('layout', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('filter', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('indicators.dataviz',),
        ),
        migrations.CreateModel(
            name='Table',
            fields=[
                ('dataviz_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='indicators.DataViz')),
                ('transpose', models.BooleanField(default=False)),
                ('show_percent', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('indicators.dataviz',),
        ),
        migrations.CreateModel(
            name='YearSeries',
            fields=[
                ('series_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='indicators.Series')),
                ('year', models.IntegerField(default=2010, validators=[django.core.validators.MinValueValidator(2000), django.core.validators.MaxValueValidator(2020)])),
            ],
            options={
                'abstract': False,
            },
            bases=('indicators.series',),
        ),
        migrations.CreateModel(
            name='VizVariable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField()),
                ('data_viz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='viz_to_variable', to='indicators.DataViz')),
                ('variable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variable_to_viz', to='indicators.Variable')),
            ],
            options={
                'verbose_name': 'Visualization Variable',
                'verbose_name_plural': 'Visualization Variables',
                'ordering': ('order',),
                'unique_together': {('data_viz', 'variable', 'order')},
            },
        ),
        migrations.CreateModel(
            name='Value',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField(blank=True, null=True)),
                ('margin', models.FloatField(blank=True, null=True)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='geo.Geography')),
                ('variable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='indicators.Variable')),
            ],
        ),
        migrations.CreateModel(
            name='Subdomain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('indicators', models.ManyToManyField(blank=True, related_name='groups', to='indicators.Indicator')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('subdomains', models.ManyToManyField(blank=True, related_name='domains', to='indicators.Subdomain')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='dataviz',
            name='indicator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_vizes', to='indicators.Indicator'),
        ),
        migrations.AddField(
            model_name='dataviz',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_indicators.dataviz_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='dataviz',
            name='series',
            field=models.ManyToManyField(related_name='data_vizes', to='indicators.Series'),
        ),
        migrations.AddField(
            model_name='dataviz',
            name='variables',
            field=models.ManyToManyField(through='indicators.VizVariable', to='indicators.Variable'),
        ),
        migrations.CreateModel(
            name='CKANGeomSource',
            fields=[
                ('ckansource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='indicators.CKANSource')),
                ('geom_field', models.CharField(blank=True, default='_geom', max_length=100, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('indicators.ckansource',),
        ),
        migrations.CreateModel(
            name='CKANRegionalSource',
            fields=[
                ('ckansource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='indicators.CKANSource')),
                ('blockgroup_field', models.CharField(blank=True, max_length=100, null=True)),
                ('tract_field', models.CharField(blank=True, max_length=100, null=True)),
                ('countysubdivision_field', models.CharField(blank=True, max_length=100, null=True)),
                ('place_field', models.CharField(blank=True, max_length=100, null=True)),
                ('neighborhood_field', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('indicators.ckansource',),
        ),
        migrations.CreateModel(
            name='CKANVariable',
            fields=[
                ('variable_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='indicators.Variable')),
                ('aggregation_method', models.CharField(choices=[('NONE', 'None'), ('COUNT', 'Count'), ('SUM', 'Sum'), ('AVG', 'Mean'), ('MODE', 'Mode'), ('MAX', 'Maximum'), ('MIN', 'Minimum')], default='COUNT', max_length=5)),
                ('field', models.CharField(help_text='field in source to aggregate', max_length=100)),
                ('sql_filter', models.TextField(blank=True, help_text='SQL clause that will be used to filter data.', null=True)),
                ('sources', models.ManyToManyField(related_name='ckan_variables', to='indicators.CKANSource')),
            ],
            options={
                'abstract': False,
            },
            bases=('indicators.variable',),
        ),
        migrations.CreateModel(
            name='CensusVariableSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('formula', models.TextField()),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='source_to_variable', to='indicators.CensusSource')),
                ('variable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variable_to_source', to='indicators.CensusVariable')),
            ],
        ),
        migrations.AddField(
            model_name='censusvariable',
            name='sources',
            field=models.ManyToManyField(related_name='census_variables', through='indicators.CensusVariableSource', to='indicators.CensusSource'),
        ),
        migrations.CreateModel(
            name='CensusValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('census_table', models.CharField(db_index=True, max_length=15)),
                ('value', models.FloatField(blank=True, null=True)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='geo.Geography')),
            ],
            options={
                'unique_together': {('region', 'census_table')},
                'index_together': {('region', 'census_table')},
            },
        ),
    ]
